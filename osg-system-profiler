#!/bin/sh

realdir ()
{
    # print the canonical path of a directory, resolving symlinks in
    # the way. On files, it will just echo back the argument.
    if [ -d "$1" ]; then
        ( cd "$1" && pwd -P )
    else
        echo "$1"
        return 1
    fi
}

check_rpm()
{
    RPM=$1

    echo "***** RPM: $RPM"                    >> $log
    rpm -q $RPM                               >> $log 2>&1
    if [ $? -eq 0 ]; then
        rpm -q --verify $RPM                  >> $log 2>&1
        if [ $? -eq 0 ]; then
            echo "$RPM has not been modified" >> $log
        fi
        RC=0
    else
        RC=1
    fi
    echo ""                                   >> $log
    return $RC
}

check_cert()
{
    CERT=$1
    echo "***** Certificate: $CERT"         >> $log
    if [ -r $CERT ]; then
        openssl x509 -in $CERT -text -noout >> $log 2>&1
    else
        echo "Can't read $CERT"             >> $log
    fi
    echo ""                                 >> $log
}

tail_log()
{
    LOG=$1
    LINES=$2
    echo "***** $LOG (last $LINES lines)" >> $log
    if [ -r $LOG ]; then
        tail --lines=$LINES $LOG          >> $log 2>&1
    else
        echo "$LOG doesn't exist"         >> $log
    fi
    echo ""                               >> $log
}

dump_file()
{
    FILE=$1
    echo "***** $FILE"                   >> $log
    if [ -r $FILE ]; then
        cat $FILE                        >> $log 2>&1
    else
        echo "$FILE doesn't exist"       >> $log
    fi
    echo ""                              >> $log
}

dump_files_in_dir()
{
    DIR=$1
    echo "***** Files in $DIR" >> $log
    if [ -L $DIR ]; then
        REAL_DIR=$(realdir "$DIR")
        echo "(symbolic link to $REAL_DIR)" >> $log
    else
        REAL_DIR=$DIR
    fi

    if [ -d $REAL_DIR ]; then
        find $REAL_DIR -type f | sort | xargs -iX bash -c "echo File: X; cat X; echo" >> $log
    else
        echo "$REAL_DIR can't be read as a directory" >> $log
    fi
    echo "" >> $log
}

list_directory()
{
    DIR=$1
    echo "***** Contents of $DIR" >> $log
    if [ -L $DIR ]; then
        REAL_DIR=$(realdir "$DIR")
        echo "(symbolic link to $REAL_DIR)" >> $log
    else
        REAL_DIR=$DIR
    fi

    if [ -d $REAL_DIR ]; then
        ls -laF $REAL_DIR              >> $log 2>&1
    else
        echo $REAL_DIR                 >> $log
    fi
    echo ""                            >> $log
}

run_cmd()
{
    CMD=$1
    shift
    OPTIONS=$@

    echo "***** Running: $CMD $OPTIONS"         >> $log
    which $CMD > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        $CMD $OPTIONS                           >> $log 2>&1
    else
        echo $?                                 >> $log
        echo "Cannot find $CMD."                >> $log
    fi
    echo ""                                     >> $log
}

dir=`pwd`

if [ ! -w $dir ]; then
    echo "I'm sorry, I don't have permission to create osg-profile.txt"
    echo "in the current directory. Please change into a directory where"
    echo "you have permission, or switch to a user that does have permission"
    exit 1
fi

log=$dir/"osg-profile.txt"
if [ -e $log ]; then
    echo "Backing up old $log to $log.bak"
    mv -f $log $log.bak
fi

# Determine whether we are profiling a tarball install or an rpm install
# based on whether or not $OSG_LOCATION is defined.

# XXX This will falsely identify an OSG 1.2 install as a tarball install
tarball_install=false
rpm_install=true
if [ "X$OSG_LOCATION" != X ]; then
    tarball_install=true
    rpm_install=false
fi

echo "OSG System Profiler"
if $tarball_install; then
    echo "Analyzing tarball install with OSG_LOCATION=$OSG_LOCATION..."
    echo "OSG System Profile (tarball OSG_LOCATION=$OSG_LOCATION)" >> $log
elif $rpm_install; then
    echo "Analyzing RPM install..."
    echo "OSG System Profile (RPM)" >> $log
fi

echo Created at `date`    >> $log
echo ""                   >> $log

run_cmd hostname
run_cmd uname -a

echo "***** Kernel RPMs"                                              >> $log
rpm -qa | grep "^kernel" | sort | xargs --no-run-if-empty -n 1 -iX bash -c "rpm -q X; rpm -V X" >> $log
echo ""                                                               >> $log

dump_file "/etc/issue"
dump_file "/etc/redhat-release"
dump_file "/etc/nsswitch.conf"
dump_file "/etc/hosts"

run_cmd df --human-readable --print-type
run_cmd free

dump_file "/proc/cpuinfo"

run_cmd netstat -i

if [ root = `whoami` ]; then
    run_cmd /sbin/iptables -vL
else
    echo "***** No iptables info (user was not root)" >> $log
fi

dump_file "/etc/selinux/config"
dump_file "/selinux/enforce"

run_cmd osg-version
if $rpm_install; then
    rpm -qa | grep "^osg" | sort | xargs --no-run-if-empty -n 1 rpm -q >> $log
    echo "" >> $log

    check_rpm "osg-configure"
    tail_log /var/log/osg/osg-configure.log 200
    dump_files_in_dir "/etc/osg/config.d"
fi

check_rpm "perl"
run_cmd perl -V

check_rpm "python"
if [ $? -eq 0 ]; then
    echo "***** Python information:"                                                    >> $log
    python -c "import sys; print 'Version: ' + sys.version"                             >> $log
    python -c "import sys; print 'Executable: ' + sys.executable"                       >> $log
    python -c "import sys; print 'Prefix: ' + sys.prefix"                               >> $log
    python -c 'import platform; print "Architecture: ",; print platform.architecture()' >> $log
    python -c "import sys; print 'Search paths: ',; print  sys.path"                    >> $log
    echo ""                                                                             >> $log
fi

check_rpm openssl
run_cmd openssl version

if $tarball_install; then
    dump_file $OSG_LOCATION/setup.sh
    dump_file $OSG_LOCATION/setup.csh
fi

echo "***** Running: /usr/bin/env | sort" >> $log
/usr/bin/env | sort                       >> $log
echo ""                                   >> $log

list_directory "${OSG_LOCATION-}/etc/grid-security"
if $rpm_install; then
    check_cert "/etc/grid-security/hostcert.pem"
    check_cert "/etc/grid-security/http/httpcert.pem"
    check_cert "/etc/grid-security/rsv/rsvcert.pem"
    check_cert "/etc/grid-security/voms/vomscert.pem"

    run_cmd rpm -q --whatprovides grid-certificates
fi

list_directory "${OSG_LOCATION-}/etc/grid-security/certificates"

if $rpm_install; then
    dump_file "/etc/grid-security/gsi-authz.conf"
    dump_file "/etc/lcmaps.db"

    check_rpm rpm
    check_rpm yum

    dump_file "/etc/yum.conf"
    echo "***** Questions about yum.conf to consider:"    >> $log
    echo "Are plugins enabled in yum.conf?"               >> $log
    echo "If not, could be getting wrong RPMs from EPEL." >> $log
    echo ""                                               >> $log

    dump_files_in_dir "/etc/yum.repos.d/"

    dump_files_in_dir "/etc/globus/"

    tail_log /var/log/globus-gatekeeper.log 200
    tail_log /var/log/edg-mkgridmap.log 50
    tail_log /var/log/glite-ce-monitor/glite-ce-monitor.log 200
    tail_log /var/log/gip/gip.log 200
    tail_log /var/log/gridftp.log 200
    tail_log /var/log/gridftp-auth.log 200
    tail_log /var/log/bestman2/bestman2.log 200
    tail_log /var/log/bestman2/event.srm.log 200


    # List all RPMs and verify them. Put the listing and the verification in
    # separate sections.  Verification only lists modified RPMs.
    echo "Verifying RPMs. This may take a while."

    all_rpms_log=$(mktemp $dir/allrpmslog.XXXXXX)
    rpm_verify_log=$(mktemp $dir/rpmverifylog.XXXXXX)

    rpm -qa | sort | uniq | while read rpm_to_verify; do
        echo $rpm_to_verify >> $all_rpms_log

        # This awk trick prints out the header iff rpm --verify actually produces output
        rpm --verify $rpm_to_verify 2> /dev/null | awk '
            NR==1 { print "***** rpm --verify '$rpm_to_verify'" }
            { print }' >> $rpm_verify_log
    done
    echo "***** All RPMs" >> $log
    cat $all_rpms_log     >> $log
    echo ""               >> $log
    cat $rpm_verify_log   >> $log

    rm -f $all_rpms_log $rpm_verify_log
fi

if $tarball_install; then
    dump_file "$OSG_LOCATION"/etc/fetch-crl*.conf
fi

echo ""
echo "Your system profile is located in:"
echo "  $log"
echo ""
echo "If you are having problems with your installation, please send email to"
echo "vdt-support@opensciencegrid.org, or follow one of the other methods for"
echo "getting help listed at:"
echo "https://twiki.grid.iu.edu/bin/view/Documentation/Release3/HelpProcedure"
echo ""

exit 0

